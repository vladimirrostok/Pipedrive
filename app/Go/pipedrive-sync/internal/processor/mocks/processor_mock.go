// Code generated by MockGen. DO NOT EDIT.
// Source: processor.go
//
// Generated by this command:
//
//      mockgen -source=processor.go
//

// Package mock_processor is a generated GoMock package.
package mock_processor

import (
        model "pipedrive-sync/pipedrive-sync/internal/model"
        processor "pipedrive-sync/pipedrive-sync/internal/processor"
        reflect "reflect"

        gomock "go.uber.org/mock/gomock"
)

// MockDataProcessor is a mock of DataProcessor interface.
type MockDataProcessor struct {
        ctrl     *gomock.Controller
        recorder *MockDataProcessorMockRecorder
}

// MockDataProcessorMockRecorder is the mock recorder for MockDataProcessor.
type MockDataProcessorMockRecorder struct {
        mock *MockDataProcessor
}

// NewMockDataProcessor creates a new mock instance.
func NewMockDataProcessor(ctrl *gomock.Controller) *MockDataProcessor {
        mock := &MockDataProcessor{ctrl: ctrl}
        mock.recorder = &MockDataProcessorMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataProcessor) EXPECT() *MockDataProcessorMockRecorder {
        return m.recorder
}

// ProcessCustomers mocks base method.
func (m *MockDataProcessor) ProcessCustomers(data <-chan model.Customer) (chan bool, chan processor.Result) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "ProcessCustomers", data)
        ret0, _ := ret[0].(chan bool)
        ret1, _ := ret[1].(chan processor.Result)
        return ret0, ret1
}

// ProcessCustomers indicates an expected call of ProcessCustomers.
func (mr *MockDataProcessorMockRecorder) ProcessCustomers(data any) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessCustomers", reflect.TypeOf((*MockDataProcessor)(nil).ProcessCustomers), data)
}

// ProcessDeals mocks base method.
func (m *MockDataProcessor) ProcessDeals(data <-chan model.Deal) (chan bool, chan processor.Result) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "ProcessDeals", data)
        ret0, _ := ret[0].(chan bool)
        ret1, _ := ret[1].(chan processor.Result)
        return ret0, ret1
}

// ProcessDeals indicates an expected call of ProcessDeals.
func (mr *MockDataProcessorMockRecorder) ProcessDeals(data any) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessDeals", reflect.TypeOf((*MockDataProcessor)(nil).ProcessDeals), data)
}

// ProcessOrders mocks base method.
func (m *MockDataProcessor) ProcessOrders(data <-chan model.Order) (chan bool, chan processor.Result) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "ProcessOrders", data)
        ret0, _ := ret[0].(chan bool)
        ret1, _ := ret[1].(chan processor.Result)
        return ret0, ret1
}

// ProcessOrders indicates an expected call of ProcessOrders.
func (mr *MockDataProcessorMockRecorder) ProcessOrders(data any) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessOrders", reflect.TypeOf((*MockDataProcessor)(nil).ProcessOrders), data)
}

// ProcessOutOfSyncDeals mocks base method.
func (m *MockDataProcessor) ProcessOutOfSyncDeals(data <-chan model.Deal) (chan bool, chan processor.Result) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "ProcessOutOfSyncDeals", data)
        ret0, _ := ret[0].(chan bool)
        ret1, _ := ret[1].(chan processor.Result)
        return ret0, ret1
}

// ProcessOutOfSyncDeals indicates an expected call of ProcessOutOfSyncDeals.
func (mr *MockDataProcessorMockRecorder) ProcessOutOfSyncDeals(data any) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessOutOfSyncDeals", reflect.TypeOf((*MockDataProcessor)(nil).ProcessOutOfSyncDeals), data)
}

// ProcessPayments mocks base method.
func (m *MockDataProcessor) ProcessPayments(data <-chan model.Payment) (chan bool, chan processor.Result) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "ProcessPayments", data)
        ret0, _ := ret[0].(chan bool)
        ret1, _ := ret[1].(chan processor.Result)
        return ret0, ret1
}

// ProcessPayments indicates an expected call of ProcessPayments.
func (mr *MockDataProcessorMockRecorder) ProcessPayments(data any) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessPayments", reflect.TypeOf((*MockDataProcessor)(nil).ProcessPayments), data)
}