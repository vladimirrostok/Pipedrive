// Code generated by MockGen. DO NOT EDIT.
// Source: downloader.go
//
// Generated by this command:
//
//      mockgen -source=downloader.go
//

// Package mock_downloader is a generated GoMock package.
package mock_downloader

import (
        context "context"
        reflect "reflect"

        gomock "go.uber.org/mock/gomock"
)

// MockDownloader is a mock of Downloader interface.
type MockDownloader struct {
        ctrl     *gomock.Controller
        recorder *MockDownloaderMockRecorder
}

// MockDownloaderMockRecorder is the mock recorder for MockDownloader.
type MockDownloaderMockRecorder struct {
        mock *MockDownloader
}

// NewMockDownloader creates a new mock instance.
func NewMockDownloader(ctrl *gomock.Controller) *MockDownloader {
        mock := &MockDownloader{ctrl: ctrl}
        mock.recorder = &MockDownloaderMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDownloader) EXPECT() *MockDownloaderMockRecorder {
        return m.recorder
}

// Download mocks base method.
func (m *MockDownloader) Download(ctx context.Context, path, output string) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "Download", ctx, path, output)
        ret0, _ := ret[0].(error)
        return ret0
}

// Download indicates an expected call of Download.
func (mr *MockDownloaderMockRecorder) Download(ctx, path, output any) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Download", reflect.TypeOf((*MockDownloader)(nil).Download), ctx, path, output)
}